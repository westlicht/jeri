{"version":3,"sources":["webpack://Jeri/webpack/bootstrap","webpack://Jeri/./build_npm/utils/exr-parser.worker.js","webpack://Jeri/./build_npm/exr-wrap/exr-wrap.js","webpack://Jeri/./build_npm/exr-wrap/exr-wrap.wasm"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","exrWrap","OpenEXR","openEXRLoaded","queuedJobs","handleJob","job","jobId","image","data","console","time","exrImage","channels","loadEXRStr","width","height","exrData","nChannels","length","z","plane","Float32Array","includes","Error","g","b","type","delete","timeEnd","parseExr","self","postMessage","success","buffer","error","log","message","toString","importScripts","EXR","then","Module","shift","addEventListener","event","push"],"mappings":"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","file":"ca17c4b91e3f9037cd0b.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Web worker script that uses an emscripten-compiled version\n * of OpenEXR to parse EXR files. The webworker can be used like this:\n *\n *  const ExrParser = require('worker-loader!./utils/exr-parser-webworker.js');\n *  var worker = new ExrParser();\n *  # Send an ArrayBuffer to the webworker\n *  # Because it's basses as the second argument, the data won't be copied\n *  # but ownership will be transfered.\n *  worker.postMessage({ data }, [data]);\n *  worker.onmessage = (event: MessageEvent) => {\n *      if (event.data.success) {\n *          console.log(event.data.image);\n *      } else {\n *          console.error(event.data.message);\n *      }\n *  };\n */\n\nconst exrWrap = require('file-loader?name=exr-wrap.js!../exr-wrap/exr-wrap.js');\nconst exrWrapWasm = require('file-loader?name=exr-wrap.wasm!../exr-wrap/exr-wrap.wasm');\n\nlet openEXRLoaded = false;\nlet queuedJobs = [];\nlet OpenEXR;\n\nimportScripts(exrWrap);\n\nEXR().then(function(Module) {\n\tOpenEXR = Module;\n\topenEXRLoaded = true;\n\twhile (queuedJobs.length > 0) {\n\t\tconst job = queuedJobs.shift();\n\t\tif (job) {\n\t\t\thandleJob(job);\n\t\t}\n\t}\n});\n\nself.addEventListener('message', (event) => {\n    if (!openEXRLoaded) {\n        queuedJobs.push(event.data);\n    } else {\n        handleJob(event.data);\n    }\n});\n\nfunction handleJob(job) {\n    const jobId = job.jobId;\n    try {\n        const image = parseExr(job.data);\n        self.postMessage(\n            {\n                jobId,\n                success: true,\n                image\n            },\n            [image.data.buffer]\n        );\n    } catch (error) {\n        console.log('Error: ', error);\n        self.postMessage({\n            jobId,\n            success: false,\n            message: error.toString()\n        });\n    }\n}\n\nfunction parseExr(data) {\n    console.time('Decoding EXR'); // tslint:disable-line\n    let exrImage = null; // tslint:disable-line:no-any\n    try {\n        exrImage = OpenEXR.loadEXRStr(data);\n        const channels = exrImage.channels();\n        const {\n            width,\n            height\n        } = exrImage;\n        let nChannels = channels.length;\n        let exrData;\n        if (nChannels === 1) {\n            const z = exrImage.plane(exrImage.channels()[0]);\n            exrData = new Float32Array(width * height);\n            for (let i = 0; i < width * height; i++) {\n                exrData[i] = z[i];\n            }\n        } else if (exrImage.channels().includes('R') &&\n            exrImage.channels().includes('G') &&\n            exrImage.channels().includes('B')) {\n            const r = exrImage.plane('R');\n            const g = exrImage.plane('G');\n            const b = exrImage.plane('B');\n            exrData = new Float32Array(width * height * 3);\n            for (let i = 0; i < width * height; i++) {\n                exrData[i * 3] = r[i];\n                exrData[i * 3 + 1] = g[i];\n                exrData[i * 3 + 2] = b[i];\n            }\n            nChannels = 3;\n        } else {\n            throw new Error('EXR image not supported');\n        }\n        return {\n            height,\n            width,\n            nChannels,\n            data: exrData,\n            type: 'HdrImage',\n        };\n    } finally {\n        if (exrImage) {\n            exrImage.delete();\n        }\n        console.timeEnd('Decoding EXR'); // tslint:disable-line\n    }\n}\n","module.exports = __webpack_public_path__ + \"exr-wrap.js\";","module.exports = __webpack_public_path__ + \"exr-wrap.wasm\";"],"sourceRoot":""}